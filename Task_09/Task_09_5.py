# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ5

# –û–±—ä–µ–¥–∏–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –ø—Ä–æ—à–ª—ã—Ö –∑–∞–¥–∞—á. –§—É–Ω–∫—Ü–∏—é —É–≥–∞–¥–∞–π–∫—É –∑–∞–¥–µ–∫–æ—Ä–∏—Ä—É–π—Ç–µ:
#   ‚óã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞–º–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤,
#   ‚óã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º –∫–æ–Ω—Ç—Ä–æ–ª—è –∑–Ω–∞—á–µ–Ω–∏–π –∏
#   ‚óã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞.
# –í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤.

from random import randint
from typing import Callable
import json
import os

# ----- –î–ï–ö–û–†–ê–¢–û–† –ú–ù–û–ì–û–ö–†–ê–¢–ù–û–ì–û –í–´–ó–û–í–ê ------

def decor_couter (count: int):
    def decor_couter_inner (func: Callable):
        def wrapper (*args, **kwargs):
            res = []
            for i_count in range (count):
                print (f"{i_count=}, {func}")
                res.append (func (*args, **kwargs))
            return res
        return wrapper
    return decor_couter_inner


# ----- –î–ï–ö–û–†–ê–¢–û–† –ó–ê–ü–ò–°–ò –ü–ê–†–ê–ú–ï–¢–†–û–í ------
def decor_param (func: Callable):
    def wrapper (*args, **kwargs):
        file_name = func.__name__ + ".json"
        try:
            with open (file_name, "r", encoding="utf-8") as file:
                data = json.load (file)
        except FileNotFoundError:
            data = {}
        result = str (func (*args, **kwargs))
        data [result] = list (args + tuple(kwargs.items()))
        with open (file_name, "w", encoding="utf-8") as file:
            json.dump (data, file, indent=4, ensure_ascii=False )
        return result
    return wrapper

# ----- –î–ï–ö–û–†–ê–¢–û–† –ö–û–ù–¢–†–û–õ–Ø –í–í–ï–î–ï–ù–ù–´–• –î–ê–ù–ù–´–• ------
def decor_limits (func: Callable):
    def wrapper (*args, **kwargs):
        min, max, count, *_ = args
        if not (0 < max < 101):
            max = randint (1, 100)
            print (f"–í–µ—Ä—Ö–Ω–∏–π –ø—Ä–µ–¥–µ–ª –∑–∞–≥–∞–¥—ã–≤–∞–µ–º–æ–≥–æ —á–∏—Å–ª–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {max}")
        if not (0 < count < 11):
            count = randint (1, 10)
            print (f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ –æ—Ç–≥–∞–¥—ã–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {count}")
        return func (min, max, count)
    return wrapper

# ----- –ò–ì–†–ê ------
@decor_couter(3)
@decor_param
@decor_limits
def ugadai_chislo (min, max, count):
    hidden_number = randint (min, max)
    count_max = count
    print()
    print (f"–ó–∞–≥–∞–¥–∞–Ω–æ —á–∏—Å–ª–æ –æ—Ç {min} –¥–æ {max} - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–≥–∞–¥–∞—Ç—å –µ–≥–æ –º–µ–Ω—å—à–µ —á–µ–º –∑–∞ {count} –ø–æ–ø—ã—Ç–æ–∫")
    print()
    while True:
        num  = int (input(f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {min} –¥–æ {max}: "))
        if num <min or num>max:
            print ("–í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ!")
        elif num == hidden_number:
            result = f"üòÄ –¢—ã —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ ({hidden_number})! –∑–∞ {count_max - count + 1} –ø–æ–ø—ã—Ç–æ–∫"
            print (result)
            print()
            return result # <--------------- –í–´–•–û–î –µ—Å–ª–∏ —É–≥–∞–¥–∞–ª
        elif num>hidden_number:
            print("–ú–µ–Ω—å—à–µ!")
        elif num<hidden_number:
            print("–ë–æ–ª—å—à–µ!")
        count -= 1
        if count <= 0:
            print()
            result = f"üòè –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª... –ü–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã, –∞ —á–∏—Å–ª–æ –±—ã–ª–æ –∑–∞–≥–∞–¥–∞–Ω–æ: {hidden_number}"
            print (result)
            print()
            return result # <---------------- –í–´–•–û–î  –µ—Å–ª–∏ –ø—Ä–æ–∏–≥—Ä–∞–ª
        print(f" ..–æ—Å—Ç–∞–ª–æ—Å—å {count} –ø–æ–ø—ã—Ç–æ–∫...")
        print()


# ----- –ë–õ–û–ö –ó–ê–ü–£–°–ö–ê ---------------------

dir_path = os.getcwd() + "/Task_09"    # <-- —Ä–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã
os.chdir(dir_path)

ugadai_chislo (0, 10, 3)